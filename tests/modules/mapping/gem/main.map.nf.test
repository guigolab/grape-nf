nextflow_process {

    name "Test Process map"
    script "modules/mapping/gem/main.nf"
    process "map"

    tag "module"

    setup {
        run("index") {
            script "modules/mapping/gem/main.nf"
            process {
                """
                input[0] = file("${baseDir}/data/genome.fa")
                input[1] = file("${baseDir}/data/annotation.gtf")
                """
            }
        }
    }

    test("Should align reads to the reference using GEM (compressed annotation)") {

        when {
            params {
                maxMismatches = 4
                maxMultimaps = 10
            }
            process {
                """
                def fastqs = file("${baseDir}/data/test1_*.fastq.gz")
                def qScore = fastq(fastqs[0]).qualityScore()
                input[0] = file("${baseDir}/data/annotation.gtf.gz")
                input[1] = index.out
                input[2] = Channel.from(
                    [
                        [ "sample1", "test1", fastqs, "fastq", ["fqRd1", "fqRd2"], qScore]
                    ]
                )
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("Should align reads to the reference using GEM (uncompressed annotation)") {

        when {
            params {
                maxMismatches = 4
                maxMultimaps = 10
            }
            process {
                """
                def fastqs = file("${baseDir}/data/test1_*.fastq.gz")
                def qScore = fastq(fastqs[0]).qualityScore()
                input[0] = file("${baseDir}/data/annotation.gtf")
                input[1] = index.out
                input[2] = Channel.from(
                    [
                        [ "sample1", "test1", fastqs, "fastq", ["fqRd1", "fqRd2"], qScore]
                    ]
                )
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
