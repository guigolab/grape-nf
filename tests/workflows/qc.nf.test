nextflow_workflow {

    name "Test Workflow QC"
    script "workflows/qc.nf"
    workflow "QC"

    tag "workflow"

    test("Should run BAM QC (compressed annotation)") {

        when {
            params {
                inferExpTool = "RSeQC"
                bamStatsTool = "bamstats"
                annotation = "${baseDir}/data/annotation.gtf.gz"
            }
            workflow {
                """
                input[0] = Channel.from([
                    [ "sample3", "test3", file("${baseDir}/data/sample3_m4_n10_toGenome.bam"), "bam", "GenomeAlignments", true]
                ])
                input[1] = Channel.from([
                    [ "sample3", "test3", file("${baseDir}/data/sample3_m4_n10_toTranscriptome.bam"), "bam", "TranscriptomeAlignments", true]
                ])
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

    test("Should run BAM QC (uncompressed annotation)") {

        when {
            params {
                inferExpTool = "RSeQC"
                bamStatsTool = "bamstats"
                annotation = "${baseDir}/data/annotation.gtf"
            }
            workflow {
                """
                input[0] = Channel.from([
                    [ "sample3", "test3", file("${baseDir}/data/sample3_m4_n10_toGenome.bam"), "bam", "GenomeAlignments", true]
                ])
                input[1] = Channel.from([
                    [ "sample3", "test3", file("${baseDir}/data/sample3_m4_n10_toTranscriptome.bam"), "bam", "TranscriptomeAlignments", true]
                ])
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
